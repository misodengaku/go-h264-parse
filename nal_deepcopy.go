// generated by deep-copy -o nal_deepcopy.go --type NAL .; DO NOT EDIT.

package h264parse

// DeepCopy generates a deep copy of NAL
func (o NAL) DeepCopy() NAL {
	var cp NAL = o
	if o.RBSPByte != nil {
		cp.RBSPByte = make([]byte, len(o.RBSPByte))
		copy(cp.RBSPByte, o.RBSPByte)
	}
	if o.HeaderBytes != nil {
		cp.HeaderBytes = make([]byte, len(o.HeaderBytes))
		copy(cp.HeaderBytes, o.HeaderBytes)
	}
	if o.SPS.OffsetForRefFrames != nil {
		cp.SPS.OffsetForRefFrames = make([]uint64, len(o.SPS.OffsetForRefFrames))
		copy(cp.SPS.OffsetForRefFrames, o.SPS.OffsetForRefFrames)
	}
	if o.PPS.RunLengthMinus1 != nil {
		cp.PPS.RunLengthMinus1 = make([]uint64, len(o.PPS.RunLengthMinus1))
		copy(cp.PPS.RunLengthMinus1, o.PPS.RunLengthMinus1)
	}
	if o.PPS.TopLeft != nil {
		cp.PPS.TopLeft = make([]uint64, len(o.PPS.TopLeft))
		copy(cp.PPS.TopLeft, o.PPS.TopLeft)
	}
	if o.PPS.BottomRight != nil {
		cp.PPS.BottomRight = make([]uint64, len(o.PPS.BottomRight))
		copy(cp.PPS.BottomRight, o.PPS.BottomRight)
	}
	if o.PPS.SeqScalingListPresentFlags != nil {
		cp.PPS.SeqScalingListPresentFlags = make([]bool, len(o.PPS.SeqScalingListPresentFlags))
		copy(cp.PPS.SeqScalingListPresentFlags, o.PPS.SeqScalingListPresentFlags)
	}
	if o.SEI.PayloadBytes != nil {
		cp.SEI.PayloadBytes = make([]byte, len(o.SEI.PayloadBytes))
		copy(cp.SEI.PayloadBytes, o.SEI.PayloadBytes)
	}
	return cp
}
